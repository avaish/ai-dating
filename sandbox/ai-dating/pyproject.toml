[project]
name = "ai-dating"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
dependencies = []

[tool.black]
line-length = 99
fast = true
target-version = ['py310']
extend-exclude = '''
/(
    node_modules
  | event_delivery
)/
'''
force-exclude = '_pb2.py'

[tool.isort]
profile = 'black'
combine_as_imports = true
default_section = 'THIRDPARTY'
force_alphabetical_sort_within_sections = true
force_sort_within_sections = true
include_trailing_comma = true
known_future_library = 'past,__future__'
known_first_party = 'infra'
line_length = 99
multi_line_output = 3
order_by_type = false
skip_glob = ''

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # TODO(brian): enable the following
  "ARG001",
  "ARG002",
  "C401",
  "C405",
  "FBT001",
  "N804",
  "PLR1714",
  "PLW2901",
  "UP032",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["file_watcher_adapter"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["file_watcher_adapter", "tests"]
branch = true
parallel = true
omit = [
  "src/file_watcher_adapter/__about__.py",
]

[tool.coverage.paths]
file_watcher_adapter = ["src/file_watcher_adapter", "*/file-watcher-adapter/src/file_watcher_adapter"]
tests = ["tests", "*/file-watcher-adapter/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
